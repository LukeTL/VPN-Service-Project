# Pipeline for Terraform and Ansible Development

# CI_PROJECT_DIR = /builds/cloud_project1/vpn_service_project

image:
  name: registry.gitlab.com/cloud_project1/vpn_service_project/custom_image:v1.0.1

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/infrastructure
  TF_STATE_NAME: default
  # ANSIBLE_ROOT: ${CI_PROJECT_DIR}/server_configuration

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/

stages:
  - validate
  # - test
  - build
  - deploy
  - configure
  - cleanup

fmt:
  stage: validate
  script:
    - gitlab-terraform fmt
  allow_failure: true

validate:
  stage: validate
  script:
    - ls -a
    - echo $CI_PROJECT_DIR
    - gitlab-terraform validate

build:
  stage: build
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

# Deploy Infrastructure if commit message lacks the string "destroy"
deploy:
  stage: deploy
  script:
    - gitlab-terraform apply
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE !~ /destroy/
      when: manual
  environment:
    name: $TF_STATE_NAME

# Fetch Ansible Dynamic Inventory from AWS
# IT WORKS WOOOOOO (semi works, hv to figure out how inventory even works)
configure:
  stage: configure
  script:
    - ansible-inventory -i "server_configuration/aws_ec2.yml" --list
    - ansible-inventory -i "server_configuration/aws_ec2.yml" --graph
    - ansible-playbook -i "server_configuration/aws_ec2.yml" "server_configuration/vpn_server_playbook.yml"
    # - ansible-inventory -i "server_configuration/aws_ec2.yml" --list
    # - ls -a "./server_configuration"
    # - ansible aws_ec2 -i "server_configuration/aws_ec2.yml" -m ping
    # - ansible all --list-hosts
    # - ansible-inventory --graph
  rules:
    - if: $CI_COMMIT_TITLE !~ /destroy/
  dependencies:
    - deploy

# Destroy infrastructure if commit message has the string "destroy"
destroy:
  stage: cleanup
  script:
    - gitlab-terraform destroy
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE =~ /destroy/
      when: on_success
  environment:
    name: $TF_STATE_NAME
