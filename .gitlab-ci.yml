# include:
#   - template: Terraform/Base.gitlab-ci.yml
#   - template: Jobs/SAST-IaC.gitlab-ci.yml

# variables:
#   TF_ROOT: ${CI_PROJECT_DIR}/infrastructure

# image:
#   name: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/branches/v1-6-0-1.5:f158d31c1356d14029d8285ddd4b79ebbe6d7e90"

# stages:
#   - validate
#   - test
#   - build
#   - deploy
#   - cleanup

# fmt:
#   extends: .terraform:fmt
#   needs: []

# validate:
#   extends: .terraform:validate
#   needs: []

# build:
#   extends: .terraform:build

# deploy:
#   extends: .terraform:deploy
#   rules:
#     - if: $CI_COMMIT_TITLE !~ /destroy/
#       when: manual
#   dependencies:
#     - build
#   environment:
#     name: $TF_STATE_NAME

# cleanup:
#   extends: .terraform:destroy
#   environment:
#     name: $TF_STATE_NAME
#   rules:
#     - if: $CI_COMMIT_TITLE =~ /destroy/
#       when: on_success
# Add more stuff here

# include:
#   - template: Jobs/SAST-IaC.gitlab-ci.yml

image:
  name: registry.gitlab.com/cloud_project1/vpn_service_project/custom_image:v1.0.1

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/infrastructure
  TF_STATE_NAME: default

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/

stages:
  - validate
  # - test
  - build
  - deploy
  - configure
  - cleanup

fmt:
  stage: validate
  script:
    - gitlab-terraform fmt
  allow_failure: true

validate:
  stage: validate
  script:
    - gitlab-terraform validate

build:
  stage: build
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

# Deploy Infrastructure if commit message lacks the string "destroy"
deploy:
  stage: deploy
  script:
    - gitlab-terraform apply
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE !~ /destroy/
      when: manual
  environment:
    name: $TF_STATE_NAME

# Fetch Dynamic Inventory from AWS
configure:
  stage: configure
  script:
    - ansible-inventory -i "server_configuration/aws_ec2.yml" --list
  rules:
    - if: $CI_COMMIT_TITLE !~ /destroy/
  dependencies:
    - deploy

# Destroy infrastructure if commit message has the string "destroy"
destroy:
  stage: cleanup
  script:
    - gitlab-terraform destroy
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE =~ /destroy/
      when: on_success
  environment:
    name: $TF_STATE_NAME
  